export default "import React, { useState, useEffect, useRef } from \"react\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport styles from \"./OtherDebounceInput.module.scss\";\n\nconst Customizable = (props0) => {\n  const [value, setValue] = useState(props0.value);\n  const [infinite, setInfinite] = useState(false);\n  const [key, setKey] = useState(true);\n  /*remove*/ useEffect(() => {\n    if (props0.value !== value) {\n      setValue(props0.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props0.value]); /*remove*/\n\n  return (\n    <div>\n      <div className={styles.config}>\n        <label className={styles.label}>\n          Infinite timeout:\n          <input\n            className={styles.input}\n            type=\"checkbox\"\n            checked={infinite}\n            onChange={(e) => setInfinite(e.target.checked)}\n          />\n        </label>\n      </div>\n\n      <DebounceInput\n        debounceTimeout={infinite ? -1 : props0.debounceTimeout}\n        value={value}\n        {...props0}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={(e) => setKey(e.key)}\n      />\n      <p>Value: {value}</p>\n      <p>Key pressed: {key}</p>\n    </div>\n  );\n};\n\nconst Controllable = (props1) => {\n  const [value, setValue] = useState(props1.value);\n  const [debouncedValue, setDebouncedValue] = useState();\n  /*remove*/ useEffect(() => {\n    if (props1.value !== value) {\n      setValue(props1.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props1.value]); /*remove*/\n\n  return (\n    <div>\n      <div className={styles.config}>\n        <label className={styles.label}>\n          Contollable input:\n          <input\n            className={styles.input}\n            type=\"text\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n          {value}\n        </label>\n      </div>\n\n      <div className={styles.config}>\n        <label className={styles.label}>\n          Debounced input:\n          <DebounceInput\n            className={styles.input}\n            value={value}\n            {...props1}\n            onChange={(e) => {\n              setValue(e.target.value);\n              setDebouncedValue(e.target.value);\n            }}\n          />\n          {debouncedValue}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nconst Textarea = (props3) => {\n  const [value, setValue] = useState(props3.value);\n  const [infinite, setInfinite] = useState(false);\n  const [key, setKey] = useState(\"\");\n  /*remove*/ useEffect(() => {\n    if (props3.value !== value) {\n      setValue(props3.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props3.value]); /*remove*/\n\n  return (\n    <div>\n      <div className={styles.config}>\n        <label className={styles.label}>\n          Infinite timeout:\n          <input\n            className={styles.input}\n            type=\"checkbox\"\n            checked={infinite}\n            onChange={(e) => setInfinite(e.target.checked)}\n          />\n        </label>\n      </div>\n\n      <DebounceInput\n        cols=\"60\"\n        rows=\"7\"\n        element={props3.element}\n        className={styles.textarea}\n        {...props3}\n        debounceTimeout={infinite ? -1 : props3.debounceTimeout}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={(e) => setKey(e.key)}\n      />\n      <p>Value: {value}</p>\n      <p>Key pressed: {key}</p>\n    </div>\n  );\n};\n\nconst UndoRedo = (props2) => {\n  const [value, setValue] = useState(props2.value);\n  const [history, setHistory] = useState([\"\"]);\n  const [historyIndex, setHistoryIndex] = useState(0);\n\n  /*remove*/ useEffect(() => {\n    if (props2.value !== value) {\n      setValue(props2.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props2.value]); /*remove*/\n\n  const onChange = ({ target: { value } }) => {\n    setValue(value);\n    setHistoryIndex(historyIndex + 1);\n    setHistory([...history.slice(0, historyIndex + 1), value]);\n  };\n\n  const onRedo = () => {\n    setValueFromHistory(historyIndex + 1);\n  };\n\n  const onUndo = () => {\n    setValueFromHistory(historyIndex - 1);\n  };\n\n  const setValueFromHistory = (index) => {\n    const newHistoryIndex = Math.min(Math.max(index, 0), history.length - 1);\n\n    setValue(history[newHistoryIndex]);\n    setHistoryIndex(newHistoryIndex);\n  };\n\n  const HistoryElements = history.map((value, key) => (\n    <span className=\"item\" key={key}>\n      {key === historyIndex ? (\n        <b>{`\"${value}\"`}</b>\n      ) : (\n        <span>{`\"${value}\"`}</span>\n      )}\n    </span>\n  ));\n\n  return (\n    <div>\n      <div className={styles.config}>\n        <label className={styles.label}>\n          Debounced Input:\n          <DebounceInput\n            className={styles.input}\n            value={value}\n            {...props2}\n            onChange={onChange}\n          />\n        </label>\n\n        <label className={styles.label}>\n          <button onClick={onUndo}>Undo</button>\n        </label>\n\n        <label className={styles.label}>\n          <button onClick={onRedo}>Redo</button>\n        </label>\n      </div>\n\n      <p>Current Value: {value}</p>\n      <p>History: {HistoryElements}</p>\n      <p>History Index: {historyIndex}</p>\n    </div>\n  );\n};\n\nconst RefComponent = (props4) => {\n  const elementRef = useRef(null);\n  const [value, setValue] = useState(props4.value);\n  const [key, setKey] = useState(null);\n  /*remove*/ useEffect(() => {\n    if (props4.value !== value) {\n      setValue(props4.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props4.value]); /*remove*/\n\n  return (\n    <div>\n      <div className={styles.config}>\n        <label className={styles.label}>\n          <button onClick={() => elementRef.current.focus()}>\n            Focus, please\n          </button>\n        </label>\n\n        <label className={styles.label}>\n          <button onClick={() => elementRef.current.blur()}>\n            Blur, please\n          </button>\n        </label>\n      </div>\n\n      <DebounceInput\n        inputRef={elementRef}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={(e) => setKey(e.key)}\n        {...props4}\n      />\n      <p>Value: {value}</p>\n      <p>Key pressed: {key}</p>\n    </div>\n  );\n};\n\nexport default (props) => {\n  /*remove*/ \n  const firstElement = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      if (props && props.selectMe) {\n        props.selectMe({ currentTarget: firstElement.current }, 0, true);\n        props.selectMe({ currentTarget: firstElement.current }, 0, false);\n      }\n    }, 200);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); /*remove*/\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.title}>react-debounce-input</div>\n      <Wrapper id={0} {...props}>\n        <section className={styles.section} ref={firstElement}>\n          <div className={styles.subTitle}>Example 1. Customizable</div>\n          <Customizable\n            {...(props.multiComponent && props.multiComponent[0])}\n          />\n        </section>\n      </Wrapper>\n\n      <Wrapper id={1} {...props}>\n        <section className={styles.section}>\n          <div className={styles.subTitle}>Example 2. Controllable</div>\n          <Controllable\n            {...(props.multiComponent && props.multiComponent[1])}\n          />\n        </section>\n      </Wrapper>\n\n      <Wrapper id={2} {...props}>\n        <section className={styles.section}>\n          <div className={styles.subTitle}>Example 3. Undo-Redo</div>\n          <UndoRedo {...(props.multiComponent && props.multiComponent[2])} />\n        </section>\n      </Wrapper>\n\n      <Wrapper id={3} {...props}>\n        <section className={styles.section}>\n          <div className={styles.subTitle}>Example 4. Debounced Textarea</div>\n          <Textarea {...(props.multiComponent && props.multiComponent[3])} />\n        </section>\n      </Wrapper>\n\n      <Wrapper id={4} {...props}>\n        <section className={styles.section}>\n          <div className={styles.subTitle}>Example 5. Custom ref</div>\n          <RefComponent\n            {...(props.multiComponent && props.multiComponent[4])}\n          />\n        </section>\n      </Wrapper>\n    </div>\n  );\n};;\n\n/*remove*/ const Wrapper = (props) => {\n  return (\n    <span\n      onClick={(e) => {\n        props.selectMe(e, props.id);\n      }}\n      onMouseEnter={(e) => {\n        props.selectMe(e, props.id, true);\n      }}\n      onMouseLeave={(e) => {\n        props.unSelectMe(props.id);\n      }}\n    >\n      {props.children}\n    </span>\n  );\n}; /*remove*/\n";