export default "import React from \"react\";\nimport styles from \"./OtherFinalForumField.module.scss\";\nimport { Form, Field } from \"react-final-form\";\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst onSubmit = async (values) => {\n  await sleep(300);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nconst required = (value) => (value ? undefined : \"Required\");\nconst mustBeNumber = (value) => (isNaN(value) ? \"Must be a number\" : undefined);\nconst minValue = (min) => (value) =>\n  isNaN(value) || value >= min ? undefined : `Should be greater than ${min}`;\nconst composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), undefined);\n\nexport default (props) => {\n  let formData = {\n    ...props\n  };\n  delete formData.height;\n\n  return (\n    <div className={styles.wrapper}>\n      <h1 className={styles.title}>React Final Form Example</h1>\n      <h2 className={styles.subTitle}>Synchronous Field-Level Validation</h2>\n      <a\n        href=\"https://final-form.org/react\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Read Docs\n      </a>\n      <Form\n        onSubmit={onSubmit}\n        initialValues={formData}\n        render={({ handleSubmit, form, submitting, pristine, values }) => (\n          <form onSubmit={handleSubmit}>\n            <Field name=\"firstName\" validate={required}>\n              {({ input, meta }) => (\n                <div>\n                  <label>First Name</label>\n                  <input {...input} type=\"text\" placeholder=\"First Name\" />\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\n                </div>\n              )}\n            </Field>\n            <Field name=\"lastName\" validate={required}>\n              {({ input, meta }) => (\n                <div>\n                  <label>Last Name</label>\n                  <input {...input} type=\"text\" placeholder=\"Last Name\" />\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\n                </div>\n              )}\n            </Field>\n            <Field\n              name=\"age\"\n              validate={composeValidators(required, mustBeNumber, minValue(18))}\n            >\n              {({ input, meta }) => (\n                <div>\n                  <label>Age</label>\n                  <input {...input} type=\"text\" placeholder=\"Age\" />\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\n                </div>\n              )}\n            </Field>\n            <div className={styles.buttons}>\n              <button type=\"submit\" disabled={submitting}>\n                Submit\n              </button>\n              <button\n                type=\"button\"\n                onClick={form.reset}\n                disabled={submitting || pristine}\n              >\n                Reset\n              </button>\n            </div>\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\n          </form>\n        )}\n      />\n    </div>\n  );\n};\n";