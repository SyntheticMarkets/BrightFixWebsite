export default "import React, { useRef, useEffect } from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nfunction limit(val, max) {\n  if (val.length === 1 && val[0] > max[0]) {\n    val = \"0\" + val;\n  }\n\n  if (val.length === 2) {\n    if (Number(val) === 0) {\n      val = \"01\";\n\n      //this can happen when user paste number\n    } else if (val > max) {\n      val = max;\n    }\n  }\n\n  return val;\n}\n\nfunction cardExpiry(val) {\n  let month = limit(val.substring(0, 2), \"12\");\n  let date = limit(val.substring(2, 4), \"31\");\n\n  return month + (date.length ? \"/\" + date : \"\");\n}\n\nconst NumberFormatComponent = (props) => {\n  const firstElement = useRef(null);\n  /*remove*/ useEffect(() => {\n    setTimeout(() => {\n      if (props && props.selectMe) {\n        props.selectMe({ currentTarget: firstElement.current }, 0, true);\n        props.selectMe({ currentTarget: firstElement.current }, 0, false);\n      }\n    }, 200);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); /*remove*/\n\n  let props0 = { ...(props.multiComponent && props.multiComponent[0]) };\n  let props1 = { ...(props.multiComponent && props.multiComponent[1]) };\n  let props2 = { ...(props.multiComponent && props.multiComponent[2]) };\n  let props3 = { ...(props.multiComponent && props.multiComponent[3]) };\n  let props4 = { ...(props.multiComponent && props.multiComponent[4]) };\n  let props5 = { ...(props.multiComponent && props.multiComponent[5]) };\n  let props6 = { ...(props.multiComponent && props.multiComponent[6]) };\n  let props7 = { ...(props.multiComponent && props.multiComponent[7]) };\n  let props8 = { ...(props.multiComponent && props.multiComponent[8]) };\n  return (\n    <div>\n      <Wrapper id={0} {...props}>\n        <div className=\"example\" ref={firstElement}>\n          <h3>Prefix and thousand separator : Format currency as text</h3>\n          <NumberFormat\n              {...props0}\n              />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={1} {...props}>\n        <div className=\"example\">\n          <h3>Format with pattern : Format credit card as text</h3>\n          <NumberFormat\n            {...props1}\n          />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={2} {...props}>\n        <div className=\"example\">\n          <h3>Prefix and thousand separator : Format currency in input</h3>\n          <NumberFormat\n              {...props2}\n          />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={3} {...props}>\n        <div className=\"example\">\n          <h3>Custom thousand separator : Format currency in input</h3>\n          <NumberFormat\n              {...props3}\n          />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={4} {...props}>\n        <div className=\"example\">\n          <h3>Format with pattern : Format credit card in an input</h3>\n          <NumberFormat\n              {...props4}\n          />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={5} {...props}>\n        <div className=\"example\">\n          <h3>Format with mask : Format credit card in an input</h3>\n          <NumberFormat\n              {...props5}\n          />\n        </div>\n      </Wrapper>\n\n      <Wrapper id={6} {...props}>\n        <div className=\"example\">\n          <h3>Custom format method : Format credit card expiry time</h3>\n          <NumberFormat\n              format={cardExpiry}\n              {...props6}\n               />\n        </div>\n      </Wrapper>\n      <Wrapper id={7} {...props}>\n        <div className=\"example\">\n          <h3>Format phone number</h3>\n          <NumberFormat\n              {...props7}\n          />\n        </div>\n      </Wrapper>\n      <Wrapper id={8} {...props}>\n        <div className=\"example\">\n          <h3>Show mask on empty input</h3>\n          <NumberFormat\n              {...props8}\n          />\n        </div>\n      </Wrapper>\n    </div>\n  );\n};\nexport default NumberFormatComponent;\n\n/*remove*/ const Wrapper = (props) => {\n  return (\n    <span\n      onClick={(e) => {\n        props.selectMe && props.selectMe(e, props.id);\n      }}\n      onMouseEnter={(e) => {\n        props.selectMe && props.selectMe(e, props.id, true);\n      }}\n      onMouseLeave={(e) => {\n        props.selectMe && props.unSelectMe(props.id);\n      }}\n    >\n      {props.children}\n    </span>\n  );\n}; /*remove*/\n";